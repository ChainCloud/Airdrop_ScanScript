require! {
	\file-system :fs
	\read-file   :read
	\prelude-ls  :p
	\request     :request
	\sleep       :sleep
}

API-KEY = \GR42RCNKD327X3KWFQJRBJ7QE7ZHZEY4RV

erc20-contract-names = <[ AdToken Aragon Bancor BAT BCAP Bitquence Civic Cofound DGD DICE district0x Edgeless EOS FirstBlood FunFair Gnosis Golem Guppy Humaniq ICONOMI images KyberNetwork Lunyr Melon Metal MKR Monaco NimiqNetwork Numeraire OmiseGo Pluton Qtum REP RLC SAN SNGLS StatusNetwork Storj SwarmCity TAAS TenXPay TIME TokenCard Trustcoin vSlice WINGS Xaurum ZRX ]>
name-to-address=(name,cb)-> request "https://etherscan.io/token/"+name, (err, res, body)->
	if err=> return cb \name-to-address-err
	cb null, body.replace /[\S\s]+\<\/td\>\n\<td\>\n\<a href=\'\/address\/0x([\S]+)\'\>[\S\s]+/, '0x$1' 

n = 20
get-addresses-cycle=-> name-to-address erc20-contract-names[n], (err,res)->
	console.log res
	n +=1
	sleep.msleep 3000
	get-addresses-cycle!

get-tokens-balance=(contract, address, cb)-> request "https://api.etherscan.io/api?module=account&action=tokenbalance&contractaddress=#{contract}&address=#{address}&tag=latest&apikey=#{API-KEY}", (err,res,body)->
	if err
		console.log \err: err
		return cb err:err

	cb null, JSON.parse(body).result

j = 0
CURR = 0
balances = []
erc20-addresses = <[ 0xd0d6d6c5fe4a677d343cc433536bb717bae167dd 0x960b236A07cf122663c4303350609A66A7B288C0 0x1f573d6fb3f13d689ff844b4ce37794d79a7ff1c  0x0d8775f648430679a709e98d2b0cb6250d2887ef 0xff3519eeeea3e76f1f699ccce5e23ee0bdda41ac 0x5af2be193a6abca9c8817001f45744777db30756 0x41e5560054824ea6b0732e656e3ad64e20e94e45 0x12fef5e57bf45873cd9b62e9dbd7bfb99e32d73e 0xe0b7927c4af23765cb51314a0e0521a9645f0e2a 0x2e071D2966Aa7D8dECB1005885bA1977D6038A65 0x0abdace70d3790235af448c88547603b945604ea 0x08711d3b02c8758f2fb3ab4e80228418a7f8e39c 0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0 0xaf30d2a7e90d7dc361c8c4585e9bb7d2f6f15bc7 0x419d0d8bdd9af5e606ae2232ed285aff190e711b 0x6810e776880c02933d47db1b9fc05908e5386b96 0xa74476443119A942dE498590Fe1f2454d7D4aC0d 0xf7b098298f7c69fc14610bf71d5e02c60792894c 0xcbcc0f036ed4788f63fc0fee32873d6a7487b908 0x888666CA69E0f178DED6D75b5726Cee99A87D698 0xdd974d5c2e2928dea5f71b9825b8b646686bd200 0xfa05A73FfE78ef8f1a739473e462c54bae6567D9 0xBEB9eF514a379B997e0798FDcC901Ee474B6D9A1 0xF433089366899D83a9f26A773D59ec7eCF30355e 0xc66ea802717bfb9833400264dd12c2bceaa34a6d 0xb63b606ac810a52cca15e44bb630fd42d8d1d83d 0xcfb98637bcae43C13323EAa1731cED2B716962fD 0x1776e1f26f98b1a5df9cd347953a26dd3cb46671 0xd26114cd6EE289AccF82350c8d8487fedB8A0C07 0xD8912C10681D8B21Fd3742244f44658dBA12264E 0x9a642d6b3368ddc662CA244bAdf32cDA716005BC 0xe94327d07fc17907b4db788e5adf2ed424addff6 0x607F4C5BB672230e8672085532f7e901544a7375 0x7c5a0ce9267ed19b22f8cae653f198e3e8daf098 0xaec2e87e0a235266d9c5adc9deb4b2e29b54d009 0x744d70fdbe2ba4cf95131626614a1763df805b9e 0xb64ef51c888972c908cfacf59b47c1afbc0ab8ac 0xb9e7f8568e08d5659f5d29c4997173d84cdf2607 0xe7775a6e9bcf904eb39da2b68c5efb4f9360e08c 0xB97048628DB6B661D4C2aA833e95Dbe1A905B280 0x6531f133e6deebe7f2dce5a0441aa7ef330b4e53 0xaaaf91d9b90df800df4f55c205fd6989c977e73a 0xcb94be6f13a1182e4a4b6140cb7bf2025d28e41b 0x5c543e7AE0A1104f78406C340E9C64FD9fCE5170 0x667088b212ce3d06a1b553a7221E1fD19000d9aF 0x4DF812F6064def1e5e029f1ca858777CC98D2D81 0xe41d2489571d322189246dafa5ebde1f4699f498 ]> 
addresses = <[ 0x261e769a088ab9d61fb2b73b6e001990bc29816a 0x4de3f813f24a196ec9f0c6ad05a0850c170e4118 0x5b8602c59265b766ff1d1400c5a14b4099f2fc50 0x45c75c09e217eb42c633fcf566494bc01f509a4d 0x75f555adde5385aa0b852e0c551f3aa47715f593 0xc3b5298e62900d0fb5832ad62b448a8cb15cbd26 0xfbcd8e3ef13685c2ea1d85e9b4d18f12a045e961 0x7c73eb07e0d0152a42b70f8913022f9340631be1 0x7530ef1772f41383f4e8b684e788e012ca63f8cc 0x9ae32b7ad0b55c2d9e044b59de6e6da76962676c 0x0d31d0b3b85ac5020e11a08c05f662540f77c293 0x055ba1d03f1db3b79818ab7884278489906e95e1 0xc37cd7cedbccde02be66ef5c1caa44e1c5a017d2 0x6638410d1a9ec661780c32cbdb3f207556ee29dd 0x56b8729ffcc28c4bb5718c94261543477a4eb4e5 0x4f9ec34f4f054cda46ba9566931ec7164c4ee320 0xc4289e427a23905e871b530fb7a49bb08bc8d2d1 0x8fd0c994212183974bd519c6553646300b45012b 0x1f71ab5f2a187ef95b12cff78bbf62a42f624f1f 0x7970ee45a340abb080cf5c75c1fe13149bfc2586 0x8de8948400d9bf46e4e0b2c5f309925f0a42e383 0xf98f190b7b50c21e4a37bb22084dc253d2576740 0x16ad4e68c2e1d312c01098d3e1cfc633b90dff46 0xc1b0ed930c86467e0ba8ff6b854476cf6de51929 0xf50fa0fe35854e92f691e031f373069671098dc2 0x86c14cfc2d079a8090fd50776928083269026a15 0xcbca1a32a7930fc46d8f5623e405a7b5f4a6b4a3 0xd797d277cf7d3ac9c2a332e8e85ab8ee058160a9 0xd55e942ab23081b0088eca75ad2664513e482bb9 0x732b1db0c689a262068770cae2d3504d69a8fac0 0xba9b5cd6f675d6d2d43840e1b7505898aa49dd02 0xc65a4f8051a489c3025e1d937d09045e5ba188ac 0x42b49de051f3072c26df84873fa94a304a2933ce 0x32be343b94f860124dc4fee278fdcbd38c102d88 0xcc2de4acf7af057f51fc8b4f9fd7a6a09d5a2b0d 0xdb972dda2819f8b81b044c9b455c39ae2d4d0883 0xcd4aad065d7133955aafa6b54acb181b15a24924 0x403a726fe652c6cd28fbb42fc6105a91debc7428 0xd4022a8a6ff0c35e991ec026ad322ea607a37706 0xf0321af5182a3bec7748b82236a4f994fb938b00 0xba7c2ffc82aaf49a7f5faf757ed53634c5a4ed19 0x89d5347daa1317a0e0db6fb02ac9e0c1c1437084 0x1d60606d8a09b5015d773a80b0c660bb8d91809c 0xe28c5e4c6891afb0df739910c733766305cde69a 0xa1579b9547c72e91cf4edf86770c1eb6c245ba0c 0xeaac811ce54f921fd30652f57d3033e2dc71598d 0x757570d373ae7a3d0fa93be1407162e49605a642 0xe39f2e89bd5dac92e9c2f106036865ad01d67cb2 0x0d4ea288d4949f7e629805e3598f9d801eb9fec6 0xcc295c01af27a525096c0b3fb14040ab0b5b7e98 0x0c9541f8b0f2d690003542c4188b1a3e486053e4 0x1b9a7d47fdf918f2a87812a7e0fff874bc420799 0xfbae1bd050902754961b3c6f61751382f78370b6 0x1612e92c9ffd5c421979d00a4c89dd6b6f10df72 0x4d454f48989a2397b680568139e1aed25c0f649e 0x9ee88e6b3dd365735eb83685aee075a9035dbef8 0x878ea0ee53889ae61eb9f145e56801c8e9054f2b 0xc8cf6b135a4254d2412d45827e94e5d712f062a2 0x6e14ad2b9f054f8c4aa213a2e7a33d961ae063c8 0x56b8729ffcc28c4bb5718c94261543477a4eb4e5 0x4f9ec34f4f054cda46ba9566931ec7164c4ee320 0xc4289e427a23905e871b530fb7a49bb08bc8d2d1 0x8fd0c994212183974bd519c6553646300b45012b 0x1f71ab5f2a187ef95b12cff78bbf62a42f624f1f 0x7970ee45a340abb080cf5c75c1fe13149bfc2586 0x8de8948400d9bf46e4e0b2c5f309925f0a42e383 0xf98f190b7b50c21e4a37bb22084dc253d2576740 0x16ad4e68c2e1d312c01098d3e1cfc633b90dff46 0xc1b0ed930c86467e0ba8ff6b854476cf6de51929 0xf50fa0fe35854e92f691e031f373069671098dc2 0x86c14cfc2d079a8090fd50776928083269026a15 0xcbca1a32a7930fc46d8f5623e405a7b5f4a6b4a3 0xd797d277cf7d3ac9c2a332e8e85ab8ee058160a9 0xd55e942ab23081b0088eca75ad2664513e482bb9 0x732b1db0c689a262068770cae2d3504d69a8fac0 0xba9b5cd6f675d6d2d43840e1b7505898aa49dd02 0xc65a4f8051a489c3025e1d937d09045e5ba188ac 0x42b49de051f3072c26df84873fa94a304a2933ce 0x32be343b94f860124dc4fee278fdcbd38c102d88 0xcc2de4acf7af057f51fc8b4f9fd7a6a09d5a2b0d 0xdb972dda2819f8b81b044c9b455c39ae2d4d0883 0xcd4aad065d7133955aafa6b54acb181b15a24924 0x403a726fe652c6cd28fbb42fc6105a91debc7428 0xd4022a8a6ff0c35e991ec026ad322ea607a37706 0xf0321af5182a3bec7748b82236a4f994fb938b00 0xba7c2ffc82aaf49a7f5faf757ed53634c5a4ed19 0x89d5347daa1317a0e0db6fb02ac9e0c1c1437084 0x1d60606d8a09b5015d773a80b0c660bb8d91809c 0xe28c5e4c6891afb0df739910c733766305cde69a 0xa1579b9547c72e91cf4edf86770c1eb6c245ba0c 0xeaac811ce54f921fd30652f57d3033e2dc71598d 0x757570d373ae7a3d0fa93be1407162e49605a642 0xe39f2e89bd5dac92e9c2f106036865ad01d67cb2 0x0d4ea288d4949f7e629805e3598f9d801eb9fec6 0xcc295c01af27a525096c0b3fb14040ab0b5b7e98 0x0c9541f8b0f2d690003542c4188b1a3e486053e4 0x1b9a7d47fdf918f2a87812a7e0fff874bc420799 0xfbae1bd050902754961b3c6f61751382f78370b6 0x1612e92c9ffd5c421979d00a4c89dd6b6f10df72 0x4d454f48989a2397b680568139e1aed25c0f649e 0x9ee88e6b3dd365735eb83685aee075a9035dbef8 0x878ea0ee53889ae61eb9f145e56801c8e9054f2b 0xc8cf6b135a4254d2412d45827e94e5d712f062a2 0x6e14ad2b9f054f8c4aa213a2e7a33d961ae063c8 ]>

max-address = addresses.length - 1
max-item = erc20-addresses.length - 1


get-balances-cycle=(address, cb)~>
	get-tokens-balance erc20-addresses[CURR], address, (err,res)~>
		sleep.msleep 100

		if err
			console.log \err: err 
			return get-balances-cycle(address,cb)

		balances.push +res

		process.stdout.clearLine!
		process.stdout.cursorTo(0)
		process.stdout.write("=== address: #{j+1}/#{max-address+1} === contract: #{CURR+1} of #{max-item+1} === balances: #{balances}")

		if CURR == max-item 
			CURR := 0
			balances := []			
			return cb(p.compact(balances).length)
		else 
			CURR += 1
			get-balances-cycle(address,cb)

(get-balances-for-all=~>
	get-balances-cycle addresses[j], (res)~>
		str = "#{addresses[j]}: #{res} kind of tokens\n"
		fs.appendFileSync \total.txt str
		if j == max-address => return console.log \DONE
		j += 1
		get-balances-for-all!
)()